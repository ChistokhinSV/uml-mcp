# Smithery.ai configuration file: https://smithery.ai/docs/deployments
name: uml-mcp
version: "1.2.0"
description: "UML diagram generation server with MCP interface supporting PlantUML, Mermaid, Kroki, and D2"

startCommand:
  type: stdio
  configSchema:
    type: "object"
    properties:
      debug:
        type: "boolean"
        description: "Enable debug mode for verbose logging"
        default: false
      output_dir:
        type: "string"
        description: "Directory to store generated diagram files"
        default: "/app/output"
      transport:
        type: "string" 
        description: "Transport protocol to use (stdio or http)"
        enum: ["stdio", "http"]
        default: "stdio"
      host:
        type: "string"
        description: "Host to bind to when using HTTP transport"
        default: "127.0.0.1"
      port:
        type: "integer"
        description: "Port to bind to when using HTTP transport"
        default: 8000
        minimum: 1024
        maximum: 65535
      log_level:
        type: "string"
        description: "Logging level"
        enum: ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        default: "INFO"
      kroki_server:
        type: "string"
        description: "Kroki server URL for diagram rendering"
        default: "https://kroki.io"
      plantuml_server:
        type: "string"
        description: "PlantUML server URL for diagram rendering (leave empty to use Kroki)"
        default: ""
    additionalProperties: false
    description: "Configuration for UML diagram generation server"
  commandFunction: |-
    (config) => {
      // Build command arguments
      const args = ["mcp_server.py"];
      
      // Add transport option
      if (config.transport) {
        args.push("--transport", config.transport);
      }
      
      // Add debug flag if enabled
      if (config.debug) {
        args.push("--debug");
      }
      
      // Add host and port if using http transport
      if (config.transport === "http") {
        if (config.host) {
          args.push("--host", config.host);
        }
        if (config.port) {
          args.push("--port", config.port.toString());
        }
      }
      
      // Build environment variables
      const env = {
        "PYTHONUNBUFFERED": "1"  // Ensure unbuffered Python output
      };
      
      // Add output directory
      if (config.output_dir) {
        env.UML_MCP_OUTPUT_DIR = config.output_dir;
      }
      
      // Add log level
      if (config.log_level) {
        env.LOG_LEVEL = config.log_level;
      }
      
      // Add Kroki server
      if (config.kroki_server) {
        env.KROKI_SERVER = config.kroki_server;
      }
      
      // Add PlantUML server
      if (config.plantuml_server) {
        env.PLANTUML_SERVER = config.plantuml_server;
      }
      
      // Return command configuration
      return {
        command: "python",
        args: args,
        env: env
      };
    }
  exampleConfig: {
    "debug": false,
    "output_dir": "/app/output",
    "transport": "stdio",
    "log_level": "INFO"
  }

# Build configuration
build:
  dockerBuildPath: "../../"

# MCP tools information
tools:
  - name: "generate_uml"
    description: "Generate a UML diagram using the specified diagram type"
    parameters:
      - name: "diagram_type"
        type: "string"
        description: "Type of diagram (class, sequence, activity, etc.)"
        required: true
      - name: "code"
        type: "string"
        description: "The diagram code/description"
        required: true
      - name: "output_dir"
        type: "string"
        description: "Directory where to save the generated image"
        required: true
    returns: "Dictionary containing code, URL, and local file path"

  - name: "generate_mermaid_diagram"
    description: "Generate a Mermaid diagram"
    parameters:
      - name: "code"
        type: "string"
        description: "The Mermaid diagram code"
        required: true
      - name: "output_dir"
        type: "string"
        description: "Directory where to save the generated image"
        required: true
    returns: "Dictionary containing code, URL, and local file path"

  - name: "generate_d2_diagram"
    description: "Generate a D2 diagram"
    parameters:
      - name: "code"
        type: "string"
        description: "The D2 diagram code"
        required: true
      - name: "output_dir"
        type: "string"
        description: "Directory where to save the generated image"
        required: true
    returns: "Dictionary containing code, URL, and local file path"

  - name: "generate_graphviz_diagram"
    description: "Generate a Graphviz diagram"
    parameters:
      - name: "code"
        type: "string"
        description: "The Graphviz diagram code"
        required: true
      - name: "output_dir"
        type: "string"
        description: "Directory where to save the generated image"
        required: true
    returns: "Dictionary containing code, URL, and local file path"

  - name: "generate_erd_diagram"
    description: "Generate an Entity-Relationship diagram"
    parameters:
      - name: "code"
        type: "string"
        description: "The ERD diagram code"
        required: true
      - name: "output_dir"
        type: "string"
        description: "Directory where to save the generated image"
        required: true
    returns: "Dictionary containing code, URL, and local file path"

  - name: "tool_function"
    description: "Internal function used by specific diagram tools"
    internal: true

# MCP prompts information
prompts:
  - name: "class_diagram"
    description: "Prompt for generating UML class diagrams"
    example: |
      Please help me create a class diagram using PlantUML. Include:
      1. Classes with attributes and methods
      2. Relationships between classes (association, inheritance, composition)
      3. Access modifiers for attributes and methods (+public, -private, #protected)

  - name: "sequence_diagram"
    description: "Prompt for generating UML sequence diagrams"
    example: |
      Please help me create a sequence diagram using PlantUML. Include:
      1. Participants/actors in the sequence
      2. Messages between participants with clear direction
      3. Lifelines and activation boxes where appropriate
      4. Optional: Notes, conditional logic, loops

  - name: "activity_diagram"
    description: "Prompt for generating UML activity diagrams"
    example: |
      Please help me create an activity diagram using PlantUML. Include:
      1. Start and end points
      2. Activities/actions
      3. Decision points with conditions
      4. Transitions between activities
      5. Optional: Swim lanes for organizing activities by actor/system

# MCP resources information
resources:
  - name: "uml://types"
    description: "Get available diagram types"
    returns: "Object mapping diagram type names to their configuration"

  - name: "uml://templates"
    description: "Get diagram templates for different diagram types"
    returns: "Object mapping diagram types to template code"

  - name: "uml://examples"
    description: "Get diagram examples for different diagram types"
    returns: "Object mapping diagram types to example code"

  - name: "uml://formats"
    description: "Get supported output formats for each diagram type"
    returns: "Object mapping diagram types to supported output formats"

  - name: "uml://server-info"
    description: "Get MCP server information"
    returns: "Object containing server configuration details"