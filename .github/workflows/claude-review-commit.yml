name: Claude Review Commit

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to review (leave empty for latest main)'
        required: false
        type: string
      create_issue:
        description: 'Create GitHub issue with review results'
        required: false
        type: boolean
        default: true

jobs:
  claude-review-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for context

      - name: Determine commit to review
        id: commit
        run: |
          if [ -z "${{ github.event.inputs.commit_sha }}" ]; then
            COMMIT_SHA=$(git rev-parse HEAD)
            echo "Reviewing latest commit on main: $COMMIT_SHA"
          else
            COMMIT_SHA="${{ github.event.inputs.commit_sha }}"
            echo "Reviewing specified commit: $COMMIT_SHA"
          fi
          echo "sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          # Get commit details
          COMMIT_MSG=$(git log -1 --pretty=format:"%s" $COMMIT_SHA)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" $COMMIT_SHA)
          COMMIT_DATE=$(git log -1 --pretty=format:"%ad" $COMMIT_SHA)

          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "date=$COMMIT_DATE" >> $GITHUB_OUTPUT

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        env:
          ANTHROPIC_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        with:
          anthropic_api_key: ${{ secrets.OPENROUTER_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

          settings: |
            {
              "env": {
                "ANTHROPIC_API_URL": "https://cc.yovy.app/v1"
              }
            }

          claude_args: |
            --max-turns 3
            --model anthropic/claude-sonnet-4.5
            --allowed-tools "Bash(git:*),Read,Grep,Glob"

          prompt: |
            You are reviewing a commit on the main branch of the UML-MCP project.

            **COMMIT DETAILS:**
            - SHA: ${{ steps.commit.outputs.sha }}
            - Message: ${{ steps.commit.outputs.message }}
            - Author: ${{ steps.commit.outputs.author }}
            - Date: ${{ steps.commit.outputs.date }}
            - Repository: ${{ github.repository }}
            - Branch: main

            **YOUR TASK:**
            1. Use `git show ${{ steps.commit.outputs.sha }}` to see the changes in this commit
            2. Review the changes following the guidelines in CLAUDE.md
            3. Focus on:
               - Code quality issues
               - Security vulnerabilities
               - Performance concerns
               - Breaking changes
               - Missing tests or documentation

            **REVIEW CRITERIA:**
            - ðŸ”´ Critical: Security issues, bugs, breaking changes
            - ðŸŸ¡ Important: Code quality, performance, best practices
            - ðŸŸ¢ Optional: Style improvements, suggestions

            **OUTPUT FORMAT:**
            Please write your review in Markdown format with these sections:

            ## Summary
            Brief overview (2-3 sentences)

            ## Changes Reviewed
            List of files changed

            ## Findings

            ### ðŸ”´ Critical Issues
            (if any)

            ### ðŸŸ¡ Important Issues
            (if any)

            ### ðŸŸ¢ Suggestions
            (if any)

            ## Positive Aspects
            What was done well

            ## Verdict
            - Overall assessment
            - Recommend: Approve / Needs attention / Monitor

            After writing your review, save it to a file called `review-output.md` so it can be captured.

      - name: Save review output
        if: always()
        run: |
          if [ -f review-output.md ]; then
            echo "Review output found"
            cat review-output.md
          else
            echo "No review output file found. Check workflow logs."
          fi

      - name: Create GitHub Issue with Review
        if: github.event.inputs.create_issue == 'true' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reviewBody = '';

            try {
              reviewBody = fs.readFileSync('review-output.md', 'utf8');
            } catch (error) {
              reviewBody = 'Review output not available. Check the [workflow run logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.';
            }

            const commitSha = '${{ steps.commit.outputs.sha }}';
            const commitMsg = '${{ steps.commit.outputs.message }}';
            const commitAuthor = '${{ steps.commit.outputs.author }}';
            const commitDate = '${{ steps.commit.outputs.date }}';
            const serverUrl = '${{ github.server_url }}';
            const repo = '${{ github.repository }}';
            const runId = '${{ github.run_id }}';

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ¤– Code Review: Commit ${commitSha}`,
              body: `# Automated Code Review\n\n` +
                `**Commit:** [\`${commitSha}\`](${serverUrl}/${repo}/commit/${commitSha})\n` +
                `**Message:** ${commitMsg}\n` +
                `**Author:** ${commitAuthor}\n` +
                `**Date:** ${commitDate}\n\n` +
                `---\n\n` +
                `${reviewBody}\n\n` +
                `---\n\n` +
                `*ðŸ¤– Generated by [Claude Code Review](${serverUrl}/${repo}/actions/runs/${runId}) using Claude Sonnet 4.5*`,
              labels: ['automated-review', 'claude-code-review']
            });

            console.log(`Created issue #${issue.data.number}`);

      - name: Upload review as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-review-${{ steps.commit.outputs.sha }}
          path: |
            review-output.md
          retention-days: 30
          if-no-files-found: warn
